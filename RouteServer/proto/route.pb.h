// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#ifndef PROTOBUF_route_2eproto__INCLUDED
#define PROTOBUF_route_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DFMS {
namespace ROUTE {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_route_2eproto();
void protobuf_AssignDesc_route_2eproto();
void protobuf_ShutdownFile_route_2eproto();

class getLatestVersionRequest;
class getLatestVersionResponse;
class userLoginRequest;
class userLoginResponse;
class tFile;
class getDirFilesNameRequest;
class getDirFilesNameResponse;

enum eFileType {
  eDirType = 0,
  eDocType = 1,
  eGeneralType = 2
};
bool eFileType_IsValid(int value);
const eFileType eFileType_MIN = eDirType;
const eFileType eFileType_MAX = eGeneralType;
const int eFileType_ARRAYSIZE = eFileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFileType_descriptor();
inline const ::std::string& eFileType_Name(eFileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFileType_descriptor(), value);
}
inline bool eFileType_Parse(
    const ::std::string& name, eFileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFileType>(
    eFileType_descriptor(), name, value);
}
enum eFilePermis {
  eDenied = 0,
  eReadOnly = 1,
  eWriteOnly = 2,
  eRW = 3
};
bool eFilePermis_IsValid(int value);
const eFilePermis eFilePermis_MIN = eDenied;
const eFilePermis eFilePermis_MAX = eRW;
const int eFilePermis_ARRAYSIZE = eFilePermis_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFilePermis_descriptor();
inline const ::std::string& eFilePermis_Name(eFilePermis value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFilePermis_descriptor(), value);
}
inline bool eFilePermis_Parse(
    const ::std::string& name, eFilePermis* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFilePermis>(
    eFilePermis_descriptor(), name, value);
}
// ===================================================================

class getLatestVersionRequest : public ::google::protobuf::Message {
 public:
  getLatestVersionRequest();
  virtual ~getLatestVersionRequest();

  getLatestVersionRequest(const getLatestVersionRequest& from);

  inline getLatestVersionRequest& operator=(const getLatestVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getLatestVersionRequest& default_instance();

  void Swap(getLatestVersionRequest* other);

  // implements Message ----------------------------------------------

  getLatestVersionRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getLatestVersionRequest& from);
  void MergeFrom(const getLatestVersionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getLatestVersionRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getLatestVersionRequest* default_instance_;
};
// -------------------------------------------------------------------

class getLatestVersionResponse : public ::google::protobuf::Message {
 public:
  getLatestVersionResponse();
  virtual ~getLatestVersionResponse();

  getLatestVersionResponse(const getLatestVersionResponse& from);

  inline getLatestVersionResponse& operator=(const getLatestVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getLatestVersionResponse& default_instance();

  void Swap(getLatestVersionResponse* other);

  // implements Message ----------------------------------------------

  getLatestVersionResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getLatestVersionResponse& from);
  void MergeFrom(const getLatestVersionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string versionNo = 1;
  inline bool has_versionno() const;
  inline void clear_versionno();
  static const int kVersionNoFieldNumber = 1;
  inline const ::std::string& versionno() const;
  inline void set_versionno(const ::std::string& value);
  inline void set_versionno(const char* value);
  inline void set_versionno(const char* value, size_t size);
  inline ::std::string* mutable_versionno();
  inline ::std::string* release_versionno();
  inline void set_allocated_versionno(::std::string* versionno);

  // optional string versionUpdateMsg = 2;
  inline bool has_versionupdatemsg() const;
  inline void clear_versionupdatemsg();
  static const int kVersionUpdateMsgFieldNumber = 2;
  inline const ::std::string& versionupdatemsg() const;
  inline void set_versionupdatemsg(const ::std::string& value);
  inline void set_versionupdatemsg(const char* value);
  inline void set_versionupdatemsg(const char* value, size_t size);
  inline ::std::string* mutable_versionupdatemsg();
  inline ::std::string* release_versionupdatemsg();
  inline void set_allocated_versionupdatemsg(::std::string* versionupdatemsg);

  // optional uint32 errorCode = 3;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getLatestVersionResponse)
 private:
  inline void set_has_versionno();
  inline void clear_has_versionno();
  inline void set_has_versionupdatemsg();
  inline void clear_has_versionupdatemsg();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* versionno_;
  ::std::string* versionupdatemsg_;
  ::google::protobuf::uint32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getLatestVersionResponse* default_instance_;
};
// -------------------------------------------------------------------

class userLoginRequest : public ::google::protobuf::Message {
 public:
  userLoginRequest();
  virtual ~userLoginRequest();

  userLoginRequest(const userLoginRequest& from);

  inline userLoginRequest& operator=(const userLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userLoginRequest& default_instance();

  void Swap(userLoginRequest* other);

  // implements Message ----------------------------------------------

  userLoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userLoginRequest& from);
  void MergeFrom(const userLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string macAddress = 3;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 3;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  inline void set_allocated_macaddress(::std::string* macaddress);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.userLoginRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_macaddress();
  inline void clear_has_macaddress();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;
  ::std::string* macaddress_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static userLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class userLoginResponse : public ::google::protobuf::Message {
 public:
  userLoginResponse();
  virtual ~userLoginResponse();

  userLoginResponse(const userLoginResponse& from);

  inline userLoginResponse& operator=(const userLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userLoginResponse& default_instance();

  void Swap(userLoginResponse* other);

  // implements Message ----------------------------------------------

  userLoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userLoginResponse& from);
  void MergeFrom(const userLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string sessionId = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional uint64 loginTime = 3;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 logintime() const;
  inline void set_logintime(::google::protobuf::uint64 value);

  // optional uint32 errorCode = 4;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.userLoginResponse)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* sessionid_;
  ::google::protobuf::uint64 logintime_;
  ::google::protobuf::uint32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static userLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class tFile : public ::google::protobuf::Message {
 public:
  tFile();
  virtual ~tFile();

  tFile(const tFile& from);

  inline tFile& operator=(const tFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tFile& default_instance();

  void Swap(tFile* other);

  // implements Message ----------------------------------------------

  tFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tFile& from);
  void MergeFrom(const tFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional .DFMS.ROUTE.eFileType fileType = 2;
  inline bool has_filetype() const;
  inline void clear_filetype();
  static const int kFileTypeFieldNumber = 2;
  inline ::DFMS::ROUTE::eFileType filetype() const;
  inline void set_filetype(::DFMS::ROUTE::eFileType value);

  // optional .DFMS.ROUTE.eFilePermis filePermis = 3;
  inline bool has_filepermis() const;
  inline void clear_filepermis();
  static const int kFilePermisFieldNumber = 3;
  inline ::DFMS::ROUTE::eFilePermis filepermis() const;
  inline void set_filepermis(::DFMS::ROUTE::eFilePermis value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.tFile)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filetype();
  inline void clear_has_filetype();
  inline void set_has_filepermis();
  inline void clear_has_filepermis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* filename_;
  int filetype_;
  int filepermis_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static tFile* default_instance_;
};
// -------------------------------------------------------------------

class getDirFilesNameRequest : public ::google::protobuf::Message {
 public:
  getDirFilesNameRequest();
  virtual ~getDirFilesNameRequest();

  getDirFilesNameRequest(const getDirFilesNameRequest& from);

  inline getDirFilesNameRequest& operator=(const getDirFilesNameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getDirFilesNameRequest& default_instance();

  void Swap(getDirFilesNameRequest* other);

  // implements Message ----------------------------------------------

  getDirFilesNameRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getDirFilesNameRequest& from);
  void MergeFrom(const getDirFilesNameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reqId = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 reqid() const;
  inline void set_reqid(::google::protobuf::uint32 value);

  // optional string authUUID = 2;
  inline bool has_authuuid() const;
  inline void clear_authuuid();
  static const int kAuthUUIDFieldNumber = 2;
  inline const ::std::string& authuuid() const;
  inline void set_authuuid(const ::std::string& value);
  inline void set_authuuid(const char* value);
  inline void set_authuuid(const char* value, size_t size);
  inline ::std::string* mutable_authuuid();
  inline ::std::string* release_authuuid();
  inline void set_allocated_authuuid(::std::string* authuuid);

  // optional string dirStr = 3;
  inline bool has_dirstr() const;
  inline void clear_dirstr();
  static const int kDirStrFieldNumber = 3;
  inline const ::std::string& dirstr() const;
  inline void set_dirstr(const ::std::string& value);
  inline void set_dirstr(const char* value);
  inline void set_dirstr(const char* value, size_t size);
  inline ::std::string* mutable_dirstr();
  inline ::std::string* release_dirstr();
  inline void set_allocated_dirstr(::std::string* dirstr);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getDirFilesNameRequest)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_authuuid();
  inline void clear_has_authuuid();
  inline void set_has_dirstr();
  inline void clear_has_dirstr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* authuuid_;
  ::std::string* dirstr_;
  ::google::protobuf::uint32 reqid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getDirFilesNameRequest* default_instance_;
};
// -------------------------------------------------------------------

class getDirFilesNameResponse : public ::google::protobuf::Message {
 public:
  getDirFilesNameResponse();
  virtual ~getDirFilesNameResponse();

  getDirFilesNameResponse(const getDirFilesNameResponse& from);

  inline getDirFilesNameResponse& operator=(const getDirFilesNameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getDirFilesNameResponse& default_instance();

  void Swap(getDirFilesNameResponse* other);

  // implements Message ----------------------------------------------

  getDirFilesNameResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getDirFilesNameResponse& from);
  void MergeFrom(const getDirFilesNameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reqId = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 reqid() const;
  inline void set_reqid(::google::protobuf::uint32 value);

  // optional string dirStr = 2;
  inline bool has_dirstr() const;
  inline void clear_dirstr();
  static const int kDirStrFieldNumber = 2;
  inline const ::std::string& dirstr() const;
  inline void set_dirstr(const ::std::string& value);
  inline void set_dirstr(const char* value);
  inline void set_dirstr(const char* value, size_t size);
  inline ::std::string* mutable_dirstr();
  inline ::std::string* release_dirstr();
  inline void set_allocated_dirstr(::std::string* dirstr);

  // repeated .DFMS.ROUTE.tFile files = 3;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 3;
  inline const ::DFMS::ROUTE::tFile& files(int index) const;
  inline ::DFMS::ROUTE::tFile* mutable_files(int index);
  inline ::DFMS::ROUTE::tFile* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >*
      mutable_files();

  // optional uint32 errorCode = 4;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getDirFilesNameResponse)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_dirstr();
  inline void clear_has_dirstr();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* dirstr_;
  ::google::protobuf::uint32 reqid_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile > files_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getDirFilesNameResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// getLatestVersionRequest

// -------------------------------------------------------------------

// getLatestVersionResponse

// optional string versionNo = 1;
inline bool getLatestVersionResponse::has_versionno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getLatestVersionResponse::set_has_versionno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getLatestVersionResponse::clear_has_versionno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getLatestVersionResponse::clear_versionno() {
  if (versionno_ != &::google::protobuf::internal::kEmptyString) {
    versionno_->clear();
  }
  clear_has_versionno();
}
inline const ::std::string& getLatestVersionResponse::versionno() const {
  return *versionno_;
}
inline void getLatestVersionResponse::set_versionno(const ::std::string& value) {
  set_has_versionno();
  if (versionno_ == &::google::protobuf::internal::kEmptyString) {
    versionno_ = new ::std::string;
  }
  versionno_->assign(value);
}
inline void getLatestVersionResponse::set_versionno(const char* value) {
  set_has_versionno();
  if (versionno_ == &::google::protobuf::internal::kEmptyString) {
    versionno_ = new ::std::string;
  }
  versionno_->assign(value);
}
inline void getLatestVersionResponse::set_versionno(const char* value, size_t size) {
  set_has_versionno();
  if (versionno_ == &::google::protobuf::internal::kEmptyString) {
    versionno_ = new ::std::string;
  }
  versionno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getLatestVersionResponse::mutable_versionno() {
  set_has_versionno();
  if (versionno_ == &::google::protobuf::internal::kEmptyString) {
    versionno_ = new ::std::string;
  }
  return versionno_;
}
inline ::std::string* getLatestVersionResponse::release_versionno() {
  clear_has_versionno();
  if (versionno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = versionno_;
    versionno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getLatestVersionResponse::set_allocated_versionno(::std::string* versionno) {
  if (versionno_ != &::google::protobuf::internal::kEmptyString) {
    delete versionno_;
  }
  if (versionno) {
    set_has_versionno();
    versionno_ = versionno;
  } else {
    clear_has_versionno();
    versionno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string versionUpdateMsg = 2;
inline bool getLatestVersionResponse::has_versionupdatemsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getLatestVersionResponse::set_has_versionupdatemsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getLatestVersionResponse::clear_has_versionupdatemsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getLatestVersionResponse::clear_versionupdatemsg() {
  if (versionupdatemsg_ != &::google::protobuf::internal::kEmptyString) {
    versionupdatemsg_->clear();
  }
  clear_has_versionupdatemsg();
}
inline const ::std::string& getLatestVersionResponse::versionupdatemsg() const {
  return *versionupdatemsg_;
}
inline void getLatestVersionResponse::set_versionupdatemsg(const ::std::string& value) {
  set_has_versionupdatemsg();
  if (versionupdatemsg_ == &::google::protobuf::internal::kEmptyString) {
    versionupdatemsg_ = new ::std::string;
  }
  versionupdatemsg_->assign(value);
}
inline void getLatestVersionResponse::set_versionupdatemsg(const char* value) {
  set_has_versionupdatemsg();
  if (versionupdatemsg_ == &::google::protobuf::internal::kEmptyString) {
    versionupdatemsg_ = new ::std::string;
  }
  versionupdatemsg_->assign(value);
}
inline void getLatestVersionResponse::set_versionupdatemsg(const char* value, size_t size) {
  set_has_versionupdatemsg();
  if (versionupdatemsg_ == &::google::protobuf::internal::kEmptyString) {
    versionupdatemsg_ = new ::std::string;
  }
  versionupdatemsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getLatestVersionResponse::mutable_versionupdatemsg() {
  set_has_versionupdatemsg();
  if (versionupdatemsg_ == &::google::protobuf::internal::kEmptyString) {
    versionupdatemsg_ = new ::std::string;
  }
  return versionupdatemsg_;
}
inline ::std::string* getLatestVersionResponse::release_versionupdatemsg() {
  clear_has_versionupdatemsg();
  if (versionupdatemsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = versionupdatemsg_;
    versionupdatemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getLatestVersionResponse::set_allocated_versionupdatemsg(::std::string* versionupdatemsg) {
  if (versionupdatemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete versionupdatemsg_;
  }
  if (versionupdatemsg) {
    set_has_versionupdatemsg();
    versionupdatemsg_ = versionupdatemsg;
  } else {
    clear_has_versionupdatemsg();
    versionupdatemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 errorCode = 3;
inline bool getLatestVersionResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getLatestVersionResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getLatestVersionResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getLatestVersionResponse::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 getLatestVersionResponse::errorcode() const {
  return errorcode_;
}
inline void getLatestVersionResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// userLoginRequest

// optional string username = 1;
inline bool userLoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userLoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userLoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userLoginRequest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& userLoginRequest::username() const {
  return *username_;
}
inline void userLoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void userLoginRequest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void userLoginRequest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userLoginRequest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* userLoginRequest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userLoginRequest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool userLoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userLoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userLoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userLoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& userLoginRequest::password() const {
  return *password_;
}
inline void userLoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void userLoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void userLoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userLoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* userLoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userLoginRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string macAddress = 3;
inline bool userLoginRequest::has_macaddress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userLoginRequest::set_has_macaddress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userLoginRequest::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userLoginRequest::clear_macaddress() {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    macaddress_->clear();
  }
  clear_has_macaddress();
}
inline const ::std::string& userLoginRequest::macaddress() const {
  return *macaddress_;
}
inline void userLoginRequest::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void userLoginRequest::set_macaddress(const char* value) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(value);
}
inline void userLoginRequest::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  macaddress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userLoginRequest::mutable_macaddress() {
  set_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    macaddress_ = new ::std::string;
  }
  return macaddress_;
}
inline ::std::string* userLoginRequest::release_macaddress() {
  clear_has_macaddress();
  if (macaddress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = macaddress_;
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userLoginRequest::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (macaddress) {
    set_has_macaddress();
    macaddress_ = macaddress;
  } else {
    clear_has_macaddress();
    macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// userLoginResponse

// optional string username = 1;
inline bool userLoginResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userLoginResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userLoginResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userLoginResponse::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& userLoginResponse::username() const {
  return *username_;
}
inline void userLoginResponse::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void userLoginResponse::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void userLoginResponse::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userLoginResponse::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* userLoginResponse::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userLoginResponse::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sessionId = 2;
inline bool userLoginResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userLoginResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userLoginResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userLoginResponse::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& userLoginResponse::sessionid() const {
  return *sessionid_;
}
inline void userLoginResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void userLoginResponse::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
}
inline void userLoginResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userLoginResponse::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    sessionid_ = new ::std::string;
  }
  return sessionid_;
}
inline ::std::string* userLoginResponse::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userLoginResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 loginTime = 3;
inline bool userLoginResponse::has_logintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userLoginResponse::set_has_logintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userLoginResponse::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userLoginResponse::clear_logintime() {
  logintime_ = GOOGLE_ULONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::uint64 userLoginResponse::logintime() const {
  return logintime_;
}
inline void userLoginResponse::set_logintime(::google::protobuf::uint64 value) {
  set_has_logintime();
  logintime_ = value;
}

// optional uint32 errorCode = 4;
inline bool userLoginResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void userLoginResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void userLoginResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void userLoginResponse::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 userLoginResponse::errorcode() const {
  return errorcode_;
}
inline void userLoginResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// tFile

// optional string fileName = 1;
inline bool tFile::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tFile::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tFile::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& tFile::filename() const {
  return *filename_;
}
inline void tFile::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void tFile::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void tFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* tFile::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* tFile::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void tFile::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .DFMS.ROUTE.eFileType fileType = 2;
inline bool tFile::has_filetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tFile::set_has_filetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tFile::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tFile::clear_filetype() {
  filetype_ = 0;
  clear_has_filetype();
}
inline ::DFMS::ROUTE::eFileType tFile::filetype() const {
  return static_cast< ::DFMS::ROUTE::eFileType >(filetype_);
}
inline void tFile::set_filetype(::DFMS::ROUTE::eFileType value) {
  assert(::DFMS::ROUTE::eFileType_IsValid(value));
  set_has_filetype();
  filetype_ = value;
}

// optional .DFMS.ROUTE.eFilePermis filePermis = 3;
inline bool tFile::has_filepermis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tFile::set_has_filepermis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tFile::clear_has_filepermis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tFile::clear_filepermis() {
  filepermis_ = 0;
  clear_has_filepermis();
}
inline ::DFMS::ROUTE::eFilePermis tFile::filepermis() const {
  return static_cast< ::DFMS::ROUTE::eFilePermis >(filepermis_);
}
inline void tFile::set_filepermis(::DFMS::ROUTE::eFilePermis value) {
  assert(::DFMS::ROUTE::eFilePermis_IsValid(value));
  set_has_filepermis();
  filepermis_ = value;
}

// -------------------------------------------------------------------

// getDirFilesNameRequest

// optional uint32 reqId = 1;
inline bool getDirFilesNameRequest::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getDirFilesNameRequest::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getDirFilesNameRequest::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getDirFilesNameRequest::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
inline ::google::protobuf::uint32 getDirFilesNameRequest::reqid() const {
  return reqid_;
}
inline void getDirFilesNameRequest::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
}

// optional string authUUID = 2;
inline bool getDirFilesNameRequest::has_authuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getDirFilesNameRequest::set_has_authuuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getDirFilesNameRequest::clear_has_authuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getDirFilesNameRequest::clear_authuuid() {
  if (authuuid_ != &::google::protobuf::internal::kEmptyString) {
    authuuid_->clear();
  }
  clear_has_authuuid();
}
inline const ::std::string& getDirFilesNameRequest::authuuid() const {
  return *authuuid_;
}
inline void getDirFilesNameRequest::set_authuuid(const ::std::string& value) {
  set_has_authuuid();
  if (authuuid_ == &::google::protobuf::internal::kEmptyString) {
    authuuid_ = new ::std::string;
  }
  authuuid_->assign(value);
}
inline void getDirFilesNameRequest::set_authuuid(const char* value) {
  set_has_authuuid();
  if (authuuid_ == &::google::protobuf::internal::kEmptyString) {
    authuuid_ = new ::std::string;
  }
  authuuid_->assign(value);
}
inline void getDirFilesNameRequest::set_authuuid(const char* value, size_t size) {
  set_has_authuuid();
  if (authuuid_ == &::google::protobuf::internal::kEmptyString) {
    authuuid_ = new ::std::string;
  }
  authuuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getDirFilesNameRequest::mutable_authuuid() {
  set_has_authuuid();
  if (authuuid_ == &::google::protobuf::internal::kEmptyString) {
    authuuid_ = new ::std::string;
  }
  return authuuid_;
}
inline ::std::string* getDirFilesNameRequest::release_authuuid() {
  clear_has_authuuid();
  if (authuuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = authuuid_;
    authuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getDirFilesNameRequest::set_allocated_authuuid(::std::string* authuuid) {
  if (authuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete authuuid_;
  }
  if (authuuid) {
    set_has_authuuid();
    authuuid_ = authuuid;
  } else {
    clear_has_authuuid();
    authuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dirStr = 3;
inline bool getDirFilesNameRequest::has_dirstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getDirFilesNameRequest::set_has_dirstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getDirFilesNameRequest::clear_has_dirstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getDirFilesNameRequest::clear_dirstr() {
  if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
    dirstr_->clear();
  }
  clear_has_dirstr();
}
inline const ::std::string& getDirFilesNameRequest::dirstr() const {
  return *dirstr_;
}
inline void getDirFilesNameRequest::set_dirstr(const ::std::string& value) {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  dirstr_->assign(value);
}
inline void getDirFilesNameRequest::set_dirstr(const char* value) {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  dirstr_->assign(value);
}
inline void getDirFilesNameRequest::set_dirstr(const char* value, size_t size) {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  dirstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getDirFilesNameRequest::mutable_dirstr() {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  return dirstr_;
}
inline ::std::string* getDirFilesNameRequest::release_dirstr() {
  clear_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dirstr_;
    dirstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getDirFilesNameRequest::set_allocated_dirstr(::std::string* dirstr) {
  if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
    delete dirstr_;
  }
  if (dirstr) {
    set_has_dirstr();
    dirstr_ = dirstr;
  } else {
    clear_has_dirstr();
    dirstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// getDirFilesNameResponse

// optional uint32 reqId = 1;
inline bool getDirFilesNameResponse::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getDirFilesNameResponse::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getDirFilesNameResponse::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getDirFilesNameResponse::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
inline ::google::protobuf::uint32 getDirFilesNameResponse::reqid() const {
  return reqid_;
}
inline void getDirFilesNameResponse::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
}

// optional string dirStr = 2;
inline bool getDirFilesNameResponse::has_dirstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getDirFilesNameResponse::set_has_dirstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getDirFilesNameResponse::clear_has_dirstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getDirFilesNameResponse::clear_dirstr() {
  if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
    dirstr_->clear();
  }
  clear_has_dirstr();
}
inline const ::std::string& getDirFilesNameResponse::dirstr() const {
  return *dirstr_;
}
inline void getDirFilesNameResponse::set_dirstr(const ::std::string& value) {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  dirstr_->assign(value);
}
inline void getDirFilesNameResponse::set_dirstr(const char* value) {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  dirstr_->assign(value);
}
inline void getDirFilesNameResponse::set_dirstr(const char* value, size_t size) {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  dirstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getDirFilesNameResponse::mutable_dirstr() {
  set_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    dirstr_ = new ::std::string;
  }
  return dirstr_;
}
inline ::std::string* getDirFilesNameResponse::release_dirstr() {
  clear_has_dirstr();
  if (dirstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dirstr_;
    dirstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void getDirFilesNameResponse::set_allocated_dirstr(::std::string* dirstr) {
  if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
    delete dirstr_;
  }
  if (dirstr) {
    set_has_dirstr();
    dirstr_ = dirstr;
  } else {
    clear_has_dirstr();
    dirstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .DFMS.ROUTE.tFile files = 3;
inline int getDirFilesNameResponse::files_size() const {
  return files_.size();
}
inline void getDirFilesNameResponse::clear_files() {
  files_.Clear();
}
inline const ::DFMS::ROUTE::tFile& getDirFilesNameResponse::files(int index) const {
  return files_.Get(index);
}
inline ::DFMS::ROUTE::tFile* getDirFilesNameResponse::mutable_files(int index) {
  return files_.Mutable(index);
}
inline ::DFMS::ROUTE::tFile* getDirFilesNameResponse::add_files() {
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >&
getDirFilesNameResponse::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >*
getDirFilesNameResponse::mutable_files() {
  return &files_;
}

// optional uint32 errorCode = 4;
inline bool getDirFilesNameResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getDirFilesNameResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getDirFilesNameResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getDirFilesNameResponse::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 getDirFilesNameResponse::errorcode() const {
  return errorcode_;
}
inline void getDirFilesNameResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ROUTE
}  // namespace DFMS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DFMS::ROUTE::eFileType>() {
  return ::DFMS::ROUTE::eFileType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DFMS::ROUTE::eFilePermis>() {
  return ::DFMS::ROUTE::eFilePermis_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_route_2eproto__INCLUDED

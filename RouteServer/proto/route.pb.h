// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#ifndef PROTOBUF_route_2eproto__INCLUDED
#define PROTOBUF_route_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace DFMS {
namespace ROUTE {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_route_2eproto();
void protobuf_AssignDesc_route_2eproto();
void protobuf_ShutdownFile_route_2eproto();

class getLatestVersionRequest;
class getLatestVersionResponse;
class userLoginRequest;
class userLoginResponse;
class tFile;
class getDirFilesNameRequest;
class getDirFilesNameResponse;

enum eFileType {
  eDirType = 0,
  eDocType = 1,
  eGeneralType = 2
};
bool eFileType_IsValid(int value);
const eFileType eFileType_MIN = eDirType;
const eFileType eFileType_MAX = eGeneralType;
const int eFileType_ARRAYSIZE = eFileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFileType_descriptor();
inline const ::std::string& eFileType_Name(eFileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFileType_descriptor(), value);
}
inline bool eFileType_Parse(
    const ::std::string& name, eFileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFileType>(
    eFileType_descriptor(), name, value);
}
enum eFilePermis {
  eDenied = 0,
  eReadOnly = 1,
  eWriteOnly = 2,
  eRW = 3
};
bool eFilePermis_IsValid(int value);
const eFilePermis eFilePermis_MIN = eDenied;
const eFilePermis eFilePermis_MAX = eRW;
const int eFilePermis_ARRAYSIZE = eFilePermis_MAX + 1;

const ::google::protobuf::EnumDescriptor* eFilePermis_descriptor();
inline const ::std::string& eFilePermis_Name(eFilePermis value) {
  return ::google::protobuf::internal::NameOfEnum(
    eFilePermis_descriptor(), value);
}
inline bool eFilePermis_Parse(
    const ::std::string& name, eFilePermis* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eFilePermis>(
    eFilePermis_descriptor(), name, value);
}
// ===================================================================

class getLatestVersionRequest : public ::google::protobuf::Message {
 public:
  getLatestVersionRequest();
  virtual ~getLatestVersionRequest();

  getLatestVersionRequest(const getLatestVersionRequest& from);

  inline getLatestVersionRequest& operator=(const getLatestVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getLatestVersionRequest& default_instance();

  void Swap(getLatestVersionRequest* other);

  // implements Message ----------------------------------------------

  inline getLatestVersionRequest* New() const { return New(NULL); }

  getLatestVersionRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getLatestVersionRequest& from);
  void MergeFrom(const getLatestVersionRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getLatestVersionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getLatestVersionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getLatestVersionRequest* default_instance_;
};
// -------------------------------------------------------------------

class getLatestVersionResponse : public ::google::protobuf::Message {
 public:
  getLatestVersionResponse();
  virtual ~getLatestVersionResponse();

  getLatestVersionResponse(const getLatestVersionResponse& from);

  inline getLatestVersionResponse& operator=(const getLatestVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getLatestVersionResponse& default_instance();

  void Swap(getLatestVersionResponse* other);

  // implements Message ----------------------------------------------

  inline getLatestVersionResponse* New() const { return New(NULL); }

  getLatestVersionResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getLatestVersionResponse& from);
  void MergeFrom(const getLatestVersionResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getLatestVersionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string versionNo = 1;
  inline bool has_versionno() const;
  inline void clear_versionno();
  static const int kVersionNoFieldNumber = 1;
  inline const ::std::string& versionno() const;
  inline void set_versionno(const ::std::string& value);
  inline void set_versionno(const char* value);
  inline void set_versionno(const char* value, size_t size);
  inline ::std::string* mutable_versionno();
  inline ::std::string* release_versionno();
  inline void set_allocated_versionno(::std::string* versionno);

  // optional string versionUpdateMsg = 2;
  inline bool has_versionupdatemsg() const;
  inline void clear_versionupdatemsg();
  static const int kVersionUpdateMsgFieldNumber = 2;
  inline const ::std::string& versionupdatemsg() const;
  inline void set_versionupdatemsg(const ::std::string& value);
  inline void set_versionupdatemsg(const char* value);
  inline void set_versionupdatemsg(const char* value, size_t size);
  inline ::std::string* mutable_versionupdatemsg();
  inline ::std::string* release_versionupdatemsg();
  inline void set_allocated_versionupdatemsg(::std::string* versionupdatemsg);

  // optional uint32 errorCode = 3;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getLatestVersionResponse)
 private:
  inline void set_has_versionno();
  inline void clear_has_versionno();
  inline void set_has_versionupdatemsg();
  inline void clear_has_versionupdatemsg();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr versionno_;
  ::google::protobuf::internal::ArenaStringPtr versionupdatemsg_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getLatestVersionResponse* default_instance_;
};
// -------------------------------------------------------------------

class userLoginRequest : public ::google::protobuf::Message {
 public:
  userLoginRequest();
  virtual ~userLoginRequest();

  userLoginRequest(const userLoginRequest& from);

  inline userLoginRequest& operator=(const userLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userLoginRequest& default_instance();

  void Swap(userLoginRequest* other);

  // implements Message ----------------------------------------------

  inline userLoginRequest* New() const { return New(NULL); }

  userLoginRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userLoginRequest& from);
  void MergeFrom(const userLoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(userLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string macAddress = 3;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMacAddressFieldNumber = 3;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  inline void set_allocated_macaddress(::std::string* macaddress);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.userLoginRequest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_macaddress();
  inline void clear_has_macaddress();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr macaddress_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static userLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class userLoginResponse : public ::google::protobuf::Message {
 public:
  userLoginResponse();
  virtual ~userLoginResponse();

  userLoginResponse(const userLoginResponse& from);

  inline userLoginResponse& operator=(const userLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userLoginResponse& default_instance();

  void Swap(userLoginResponse* other);

  // implements Message ----------------------------------------------

  inline userLoginResponse* New() const { return New(NULL); }

  userLoginResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userLoginResponse& from);
  void MergeFrom(const userLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(userLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string sessionId = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionIdFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const char* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // optional uint64 loginTime = 3;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 3;
  inline ::google::protobuf::uint64 logintime() const;
  inline void set_logintime(::google::protobuf::uint64 value);

  // optional uint32 errorCode = 4;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.userLoginResponse)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_sessionid();
  inline void clear_has_sessionid();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr sessionid_;
  ::google::protobuf::uint64 logintime_;
  ::google::protobuf::uint32 errorcode_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static userLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class tFile : public ::google::protobuf::Message {
 public:
  tFile();
  virtual ~tFile();

  tFile(const tFile& from);

  inline tFile& operator=(const tFile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tFile& default_instance();

  void Swap(tFile* other);

  // implements Message ----------------------------------------------

  inline tFile* New() const { return New(NULL); }

  tFile* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const tFile& from);
  void MergeFrom(const tFile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(tFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fileName = 1;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 1;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional .DFMS.ROUTE.eFileType fileType = 2;
  inline bool has_filetype() const;
  inline void clear_filetype();
  static const int kFileTypeFieldNumber = 2;
  inline ::DFMS::ROUTE::eFileType filetype() const;
  inline void set_filetype(::DFMS::ROUTE::eFileType value);

  // optional .DFMS.ROUTE.eFilePermis filePermis = 3;
  inline bool has_filepermis() const;
  inline void clear_filepermis();
  static const int kFilePermisFieldNumber = 3;
  inline ::DFMS::ROUTE::eFilePermis filepermis() const;
  inline void set_filepermis(::DFMS::ROUTE::eFilePermis value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.tFile)
 private:
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filetype();
  inline void clear_has_filetype();
  inline void set_has_filepermis();
  inline void clear_has_filepermis();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  int filetype_;
  int filepermis_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static tFile* default_instance_;
};
// -------------------------------------------------------------------

class getDirFilesNameRequest : public ::google::protobuf::Message {
 public:
  getDirFilesNameRequest();
  virtual ~getDirFilesNameRequest();

  getDirFilesNameRequest(const getDirFilesNameRequest& from);

  inline getDirFilesNameRequest& operator=(const getDirFilesNameRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getDirFilesNameRequest& default_instance();

  void Swap(getDirFilesNameRequest* other);

  // implements Message ----------------------------------------------

  inline getDirFilesNameRequest* New() const { return New(NULL); }

  getDirFilesNameRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getDirFilesNameRequest& from);
  void MergeFrom(const getDirFilesNameRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getDirFilesNameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reqId = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 reqid() const;
  inline void set_reqid(::google::protobuf::uint32 value);

  // optional string authUUID = 2;
  inline bool has_authuuid() const;
  inline void clear_authuuid();
  static const int kAuthUUIDFieldNumber = 2;
  inline const ::std::string& authuuid() const;
  inline void set_authuuid(const ::std::string& value);
  inline void set_authuuid(const char* value);
  inline void set_authuuid(const char* value, size_t size);
  inline ::std::string* mutable_authuuid();
  inline ::std::string* release_authuuid();
  inline void set_allocated_authuuid(::std::string* authuuid);

  // optional string dirStr = 3;
  inline bool has_dirstr() const;
  inline void clear_dirstr();
  static const int kDirStrFieldNumber = 3;
  inline const ::std::string& dirstr() const;
  inline void set_dirstr(const ::std::string& value);
  inline void set_dirstr(const char* value);
  inline void set_dirstr(const char* value, size_t size);
  inline ::std::string* mutable_dirstr();
  inline ::std::string* release_dirstr();
  inline void set_allocated_dirstr(::std::string* dirstr);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getDirFilesNameRequest)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_authuuid();
  inline void clear_has_authuuid();
  inline void set_has_dirstr();
  inline void clear_has_dirstr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr authuuid_;
  ::google::protobuf::internal::ArenaStringPtr dirstr_;
  ::google::protobuf::uint32 reqid_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getDirFilesNameRequest* default_instance_;
};
// -------------------------------------------------------------------

class getDirFilesNameResponse : public ::google::protobuf::Message {
 public:
  getDirFilesNameResponse();
  virtual ~getDirFilesNameResponse();

  getDirFilesNameResponse(const getDirFilesNameResponse& from);

  inline getDirFilesNameResponse& operator=(const getDirFilesNameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const getDirFilesNameResponse& default_instance();

  void Swap(getDirFilesNameResponse* other);

  // implements Message ----------------------------------------------

  inline getDirFilesNameResponse* New() const { return New(NULL); }

  getDirFilesNameResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getDirFilesNameResponse& from);
  void MergeFrom(const getDirFilesNameResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(getDirFilesNameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 reqId = 1;
  inline bool has_reqid() const;
  inline void clear_reqid();
  static const int kReqIdFieldNumber = 1;
  inline ::google::protobuf::uint32 reqid() const;
  inline void set_reqid(::google::protobuf::uint32 value);

  // optional string dirStr = 2;
  inline bool has_dirstr() const;
  inline void clear_dirstr();
  static const int kDirStrFieldNumber = 2;
  inline const ::std::string& dirstr() const;
  inline void set_dirstr(const ::std::string& value);
  inline void set_dirstr(const char* value);
  inline void set_dirstr(const char* value, size_t size);
  inline ::std::string* mutable_dirstr();
  inline ::std::string* release_dirstr();
  inline void set_allocated_dirstr(::std::string* dirstr);

  // repeated .DFMS.ROUTE.tFile files = 3;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 3;
  inline const ::DFMS::ROUTE::tFile& files(int index) const;
  inline ::DFMS::ROUTE::tFile* mutable_files(int index);
  inline ::DFMS::ROUTE::tFile* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >*
      mutable_files();

  // optional uint32 errorCode = 4;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:DFMS.ROUTE.getDirFilesNameResponse)
 private:
  inline void set_has_reqid();
  inline void clear_has_reqid();
  inline void set_has_dirstr();
  inline void clear_has_dirstr();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr dirstr_;
  ::google::protobuf::uint32 reqid_;
  ::google::protobuf::uint32 errorcode_;
  ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile > files_;
  friend void  protobuf_AddDesc_route_2eproto();
  friend void protobuf_AssignDesc_route_2eproto();
  friend void protobuf_ShutdownFile_route_2eproto();

  void InitAsDefaultInstance();
  static getDirFilesNameResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// getLatestVersionRequest

// -------------------------------------------------------------------

// getLatestVersionResponse

// optional string versionNo = 1;
inline bool getLatestVersionResponse::has_versionno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getLatestVersionResponse::set_has_versionno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getLatestVersionResponse::clear_has_versionno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getLatestVersionResponse::clear_versionno() {
  versionno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_versionno();
}
inline const ::std::string& getLatestVersionResponse::versionno() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getLatestVersionResponse.versionNo)
  return versionno_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getLatestVersionResponse::set_versionno(const ::std::string& value) {
  set_has_versionno();
  versionno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getLatestVersionResponse.versionNo)
}
inline void getLatestVersionResponse::set_versionno(const char* value) {
  set_has_versionno();
  versionno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.getLatestVersionResponse.versionNo)
}
inline void getLatestVersionResponse::set_versionno(const char* value, size_t size) {
  set_has_versionno();
  versionno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.getLatestVersionResponse.versionNo)
}
inline ::std::string* getLatestVersionResponse::mutable_versionno() {
  set_has_versionno();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.getLatestVersionResponse.versionNo)
  return versionno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getLatestVersionResponse::release_versionno() {
  clear_has_versionno();
  return versionno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getLatestVersionResponse::set_allocated_versionno(::std::string* versionno) {
  if (versionno != NULL) {
    set_has_versionno();
  } else {
    clear_has_versionno();
  }
  versionno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), versionno);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.getLatestVersionResponse.versionNo)
}

// optional string versionUpdateMsg = 2;
inline bool getLatestVersionResponse::has_versionupdatemsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getLatestVersionResponse::set_has_versionupdatemsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getLatestVersionResponse::clear_has_versionupdatemsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getLatestVersionResponse::clear_versionupdatemsg() {
  versionupdatemsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_versionupdatemsg();
}
inline const ::std::string& getLatestVersionResponse::versionupdatemsg() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getLatestVersionResponse.versionUpdateMsg)
  return versionupdatemsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getLatestVersionResponse::set_versionupdatemsg(const ::std::string& value) {
  set_has_versionupdatemsg();
  versionupdatemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getLatestVersionResponse.versionUpdateMsg)
}
inline void getLatestVersionResponse::set_versionupdatemsg(const char* value) {
  set_has_versionupdatemsg();
  versionupdatemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.getLatestVersionResponse.versionUpdateMsg)
}
inline void getLatestVersionResponse::set_versionupdatemsg(const char* value, size_t size) {
  set_has_versionupdatemsg();
  versionupdatemsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.getLatestVersionResponse.versionUpdateMsg)
}
inline ::std::string* getLatestVersionResponse::mutable_versionupdatemsg() {
  set_has_versionupdatemsg();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.getLatestVersionResponse.versionUpdateMsg)
  return versionupdatemsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getLatestVersionResponse::release_versionupdatemsg() {
  clear_has_versionupdatemsg();
  return versionupdatemsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getLatestVersionResponse::set_allocated_versionupdatemsg(::std::string* versionupdatemsg) {
  if (versionupdatemsg != NULL) {
    set_has_versionupdatemsg();
  } else {
    clear_has_versionupdatemsg();
  }
  versionupdatemsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), versionupdatemsg);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.getLatestVersionResponse.versionUpdateMsg)
}

// optional uint32 errorCode = 3;
inline bool getLatestVersionResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getLatestVersionResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getLatestVersionResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getLatestVersionResponse::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 getLatestVersionResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getLatestVersionResponse.errorCode)
  return errorcode_;
}
inline void getLatestVersionResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getLatestVersionResponse.errorCode)
}

// -------------------------------------------------------------------

// userLoginRequest

// optional string username = 1;
inline bool userLoginRequest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userLoginRequest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userLoginRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userLoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& userLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginRequest.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginRequest.username)
}
inline void userLoginRequest::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.userLoginRequest.username)
}
inline void userLoginRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.userLoginRequest.username)
}
inline ::std::string* userLoginRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.userLoginRequest.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userLoginRequest::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.userLoginRequest.username)
}

// optional string password = 2;
inline bool userLoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userLoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userLoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& userLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginRequest.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginRequest.password)
}
inline void userLoginRequest::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.userLoginRequest.password)
}
inline void userLoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.userLoginRequest.password)
}
inline ::std::string* userLoginRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.userLoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userLoginRequest::release_password() {
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.userLoginRequest.password)
}

// optional string macAddress = 3;
inline bool userLoginRequest::has_macaddress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userLoginRequest::set_has_macaddress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userLoginRequest::clear_has_macaddress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userLoginRequest::clear_macaddress() {
  macaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_macaddress();
}
inline const ::std::string& userLoginRequest::macaddress() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginRequest.macAddress)
  return macaddress_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginRequest::set_macaddress(const ::std::string& value) {
  set_has_macaddress();
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginRequest.macAddress)
}
inline void userLoginRequest::set_macaddress(const char* value) {
  set_has_macaddress();
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.userLoginRequest.macAddress)
}
inline void userLoginRequest::set_macaddress(const char* value, size_t size) {
  set_has_macaddress();
  macaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.userLoginRequest.macAddress)
}
inline ::std::string* userLoginRequest::mutable_macaddress() {
  set_has_macaddress();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.userLoginRequest.macAddress)
  return macaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userLoginRequest::release_macaddress() {
  clear_has_macaddress();
  return macaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginRequest::set_allocated_macaddress(::std::string* macaddress) {
  if (macaddress != NULL) {
    set_has_macaddress();
  } else {
    clear_has_macaddress();
  }
  macaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddress);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.userLoginRequest.macAddress)
}

// -------------------------------------------------------------------

// userLoginResponse

// optional string username = 1;
inline bool userLoginResponse::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userLoginResponse::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userLoginResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userLoginResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& userLoginResponse::username() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginResponse.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginResponse.username)
}
inline void userLoginResponse::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.userLoginResponse.username)
}
inline void userLoginResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.userLoginResponse.username)
}
inline ::std::string* userLoginResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.userLoginResponse.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userLoginResponse::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.userLoginResponse.username)
}

// optional string sessionId = 2;
inline bool userLoginResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userLoginResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userLoginResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userLoginResponse::clear_sessionid() {
  sessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sessionid();
}
inline const ::std::string& userLoginResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginResponse.sessionId)
  return sessionid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginResponse.sessionId)
}
inline void userLoginResponse::set_sessionid(const char* value) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.userLoginResponse.sessionId)
}
inline void userLoginResponse::set_sessionid(const char* value, size_t size) {
  set_has_sessionid();
  sessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.userLoginResponse.sessionId)
}
inline ::std::string* userLoginResponse::mutable_sessionid() {
  set_has_sessionid();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.userLoginResponse.sessionId)
  return sessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* userLoginResponse::release_sessionid() {
  clear_has_sessionid();
  return sessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void userLoginResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid != NULL) {
    set_has_sessionid();
  } else {
    clear_has_sessionid();
  }
  sessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionid);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.userLoginResponse.sessionId)
}

// optional uint64 loginTime = 3;
inline bool userLoginResponse::has_logintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userLoginResponse::set_has_logintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userLoginResponse::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userLoginResponse::clear_logintime() {
  logintime_ = GOOGLE_ULONGLONG(0);
  clear_has_logintime();
}
inline ::google::protobuf::uint64 userLoginResponse::logintime() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginResponse.loginTime)
  return logintime_;
}
inline void userLoginResponse::set_logintime(::google::protobuf::uint64 value) {
  set_has_logintime();
  logintime_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginResponse.loginTime)
}

// optional uint32 errorCode = 4;
inline bool userLoginResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void userLoginResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void userLoginResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void userLoginResponse::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 userLoginResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.userLoginResponse.errorCode)
  return errorcode_;
}
inline void userLoginResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.userLoginResponse.errorCode)
}

// -------------------------------------------------------------------

// tFile

// optional string fileName = 1;
inline bool tFile::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void tFile::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void tFile::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void tFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& tFile::filename() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.tFile.fileName)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tFile::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.tFile.fileName)
}
inline void tFile::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.tFile.fileName)
}
inline void tFile::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.tFile.fileName)
}
inline ::std::string* tFile::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.tFile.fileName)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tFile::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.tFile.fileName)
}

// optional .DFMS.ROUTE.eFileType fileType = 2;
inline bool tFile::has_filetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void tFile::set_has_filetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void tFile::clear_has_filetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void tFile::clear_filetype() {
  filetype_ = 0;
  clear_has_filetype();
}
inline ::DFMS::ROUTE::eFileType tFile::filetype() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.tFile.fileType)
  return static_cast< ::DFMS::ROUTE::eFileType >(filetype_);
}
inline void tFile::set_filetype(::DFMS::ROUTE::eFileType value) {
  assert(::DFMS::ROUTE::eFileType_IsValid(value));
  set_has_filetype();
  filetype_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.tFile.fileType)
}

// optional .DFMS.ROUTE.eFilePermis filePermis = 3;
inline bool tFile::has_filepermis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void tFile::set_has_filepermis() {
  _has_bits_[0] |= 0x00000004u;
}
inline void tFile::clear_has_filepermis() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void tFile::clear_filepermis() {
  filepermis_ = 0;
  clear_has_filepermis();
}
inline ::DFMS::ROUTE::eFilePermis tFile::filepermis() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.tFile.filePermis)
  return static_cast< ::DFMS::ROUTE::eFilePermis >(filepermis_);
}
inline void tFile::set_filepermis(::DFMS::ROUTE::eFilePermis value) {
  assert(::DFMS::ROUTE::eFilePermis_IsValid(value));
  set_has_filepermis();
  filepermis_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.tFile.filePermis)
}

// -------------------------------------------------------------------

// getDirFilesNameRequest

// optional uint32 reqId = 1;
inline bool getDirFilesNameRequest::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getDirFilesNameRequest::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getDirFilesNameRequest::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getDirFilesNameRequest::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
inline ::google::protobuf::uint32 getDirFilesNameRequest::reqid() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameRequest.reqId)
  return reqid_;
}
inline void getDirFilesNameRequest::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getDirFilesNameRequest.reqId)
}

// optional string authUUID = 2;
inline bool getDirFilesNameRequest::has_authuuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getDirFilesNameRequest::set_has_authuuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getDirFilesNameRequest::clear_has_authuuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getDirFilesNameRequest::clear_authuuid() {
  authuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_authuuid();
}
inline const ::std::string& getDirFilesNameRequest::authuuid() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameRequest.authUUID)
  return authuuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDirFilesNameRequest::set_authuuid(const ::std::string& value) {
  set_has_authuuid();
  authuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getDirFilesNameRequest.authUUID)
}
inline void getDirFilesNameRequest::set_authuuid(const char* value) {
  set_has_authuuid();
  authuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.getDirFilesNameRequest.authUUID)
}
inline void getDirFilesNameRequest::set_authuuid(const char* value, size_t size) {
  set_has_authuuid();
  authuuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.getDirFilesNameRequest.authUUID)
}
inline ::std::string* getDirFilesNameRequest::mutable_authuuid() {
  set_has_authuuid();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.getDirFilesNameRequest.authUUID)
  return authuuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getDirFilesNameRequest::release_authuuid() {
  clear_has_authuuid();
  return authuuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDirFilesNameRequest::set_allocated_authuuid(::std::string* authuuid) {
  if (authuuid != NULL) {
    set_has_authuuid();
  } else {
    clear_has_authuuid();
  }
  authuuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), authuuid);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.getDirFilesNameRequest.authUUID)
}

// optional string dirStr = 3;
inline bool getDirFilesNameRequest::has_dirstr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getDirFilesNameRequest::set_has_dirstr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getDirFilesNameRequest::clear_has_dirstr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getDirFilesNameRequest::clear_dirstr() {
  dirstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dirstr();
}
inline const ::std::string& getDirFilesNameRequest::dirstr() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameRequest.dirStr)
  return dirstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDirFilesNameRequest::set_dirstr(const ::std::string& value) {
  set_has_dirstr();
  dirstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getDirFilesNameRequest.dirStr)
}
inline void getDirFilesNameRequest::set_dirstr(const char* value) {
  set_has_dirstr();
  dirstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.getDirFilesNameRequest.dirStr)
}
inline void getDirFilesNameRequest::set_dirstr(const char* value, size_t size) {
  set_has_dirstr();
  dirstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.getDirFilesNameRequest.dirStr)
}
inline ::std::string* getDirFilesNameRequest::mutable_dirstr() {
  set_has_dirstr();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.getDirFilesNameRequest.dirStr)
  return dirstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getDirFilesNameRequest::release_dirstr() {
  clear_has_dirstr();
  return dirstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDirFilesNameRequest::set_allocated_dirstr(::std::string* dirstr) {
  if (dirstr != NULL) {
    set_has_dirstr();
  } else {
    clear_has_dirstr();
  }
  dirstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dirstr);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.getDirFilesNameRequest.dirStr)
}

// -------------------------------------------------------------------

// getDirFilesNameResponse

// optional uint32 reqId = 1;
inline bool getDirFilesNameResponse::has_reqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getDirFilesNameResponse::set_has_reqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getDirFilesNameResponse::clear_has_reqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getDirFilesNameResponse::clear_reqid() {
  reqid_ = 0u;
  clear_has_reqid();
}
inline ::google::protobuf::uint32 getDirFilesNameResponse::reqid() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameResponse.reqId)
  return reqid_;
}
inline void getDirFilesNameResponse::set_reqid(::google::protobuf::uint32 value) {
  set_has_reqid();
  reqid_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getDirFilesNameResponse.reqId)
}

// optional string dirStr = 2;
inline bool getDirFilesNameResponse::has_dirstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getDirFilesNameResponse::set_has_dirstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getDirFilesNameResponse::clear_has_dirstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getDirFilesNameResponse::clear_dirstr() {
  dirstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dirstr();
}
inline const ::std::string& getDirFilesNameResponse::dirstr() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameResponse.dirStr)
  return dirstr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDirFilesNameResponse::set_dirstr(const ::std::string& value) {
  set_has_dirstr();
  dirstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getDirFilesNameResponse.dirStr)
}
inline void getDirFilesNameResponse::set_dirstr(const char* value) {
  set_has_dirstr();
  dirstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DFMS.ROUTE.getDirFilesNameResponse.dirStr)
}
inline void getDirFilesNameResponse::set_dirstr(const char* value, size_t size) {
  set_has_dirstr();
  dirstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DFMS.ROUTE.getDirFilesNameResponse.dirStr)
}
inline ::std::string* getDirFilesNameResponse::mutable_dirstr() {
  set_has_dirstr();
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.getDirFilesNameResponse.dirStr)
  return dirstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* getDirFilesNameResponse::release_dirstr() {
  clear_has_dirstr();
  return dirstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void getDirFilesNameResponse::set_allocated_dirstr(::std::string* dirstr) {
  if (dirstr != NULL) {
    set_has_dirstr();
  } else {
    clear_has_dirstr();
  }
  dirstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dirstr);
  // @@protoc_insertion_point(field_set_allocated:DFMS.ROUTE.getDirFilesNameResponse.dirStr)
}

// repeated .DFMS.ROUTE.tFile files = 3;
inline int getDirFilesNameResponse::files_size() const {
  return files_.size();
}
inline void getDirFilesNameResponse::clear_files() {
  files_.Clear();
}
inline const ::DFMS::ROUTE::tFile& getDirFilesNameResponse::files(int index) const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameResponse.files)
  return files_.Get(index);
}
inline ::DFMS::ROUTE::tFile* getDirFilesNameResponse::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:DFMS.ROUTE.getDirFilesNameResponse.files)
  return files_.Mutable(index);
}
inline ::DFMS::ROUTE::tFile* getDirFilesNameResponse::add_files() {
  // @@protoc_insertion_point(field_add:DFMS.ROUTE.getDirFilesNameResponse.files)
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >&
getDirFilesNameResponse::files() const {
  // @@protoc_insertion_point(field_list:DFMS.ROUTE.getDirFilesNameResponse.files)
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::DFMS::ROUTE::tFile >*
getDirFilesNameResponse::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:DFMS.ROUTE.getDirFilesNameResponse.files)
  return &files_;
}

// optional uint32 errorCode = 4;
inline bool getDirFilesNameResponse::has_errorcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void getDirFilesNameResponse::set_has_errorcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void getDirFilesNameResponse::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void getDirFilesNameResponse::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 getDirFilesNameResponse::errorcode() const {
  // @@protoc_insertion_point(field_get:DFMS.ROUTE.getDirFilesNameResponse.errorCode)
  return errorcode_;
}
inline void getDirFilesNameResponse::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:DFMS.ROUTE.getDirFilesNameResponse.errorCode)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ROUTE
}  // namespace DFMS

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DFMS::ROUTE::eFileType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DFMS::ROUTE::eFileType>() {
  return ::DFMS::ROUTE::eFileType_descriptor();
}
template <> struct is_proto_enum< ::DFMS::ROUTE::eFilePermis> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DFMS::ROUTE::eFilePermis>() {
  return ::DFMS::ROUTE::eFilePermis_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_route_2eproto__INCLUDED

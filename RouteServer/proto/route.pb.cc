// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: route.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "route.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DFMS {
namespace ROUTE {

namespace {

const ::google::protobuf::Descriptor* getLatestVersionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getLatestVersionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getLatestVersionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getLatestVersionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* userLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* userLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* tFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* getDirFilesNameRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getDirFilesNameRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getDirFilesNameResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getDirFilesNameResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eFileType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eFilePermis_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_route_2eproto() {
  protobuf_AddDesc_route_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "route.proto");
  GOOGLE_CHECK(file != NULL);
  getLatestVersionRequest_descriptor_ = file->message_type(0);
  static const int getLatestVersionRequest_offsets_[1] = {
  };
  getLatestVersionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getLatestVersionRequest_descriptor_,
      getLatestVersionRequest::default_instance_,
      getLatestVersionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getLatestVersionRequest));
  getLatestVersionResponse_descriptor_ = file->message_type(1);
  static const int getLatestVersionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionResponse, versionno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionResponse, versionupdatemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionResponse, errorcode_),
  };
  getLatestVersionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getLatestVersionResponse_descriptor_,
      getLatestVersionResponse::default_instance_,
      getLatestVersionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getLatestVersionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getLatestVersionResponse));
  userLoginRequest_descriptor_ = file->message_type(2);
  static const int userLoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginRequest, macaddress_),
  };
  userLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userLoginRequest_descriptor_,
      userLoginRequest::default_instance_,
      userLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userLoginRequest));
  userLoginResponse_descriptor_ = file->message_type(3);
  static const int userLoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginResponse, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginResponse, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginResponse, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginResponse, errorcode_),
  };
  userLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userLoginResponse_descriptor_,
      userLoginResponse::default_instance_,
      userLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userLoginResponse));
  tFile_descriptor_ = file->message_type(4);
  static const int tFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tFile, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tFile, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tFile, filepermis_),
  };
  tFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tFile_descriptor_,
      tFile::default_instance_,
      tFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tFile));
  getDirFilesNameRequest_descriptor_ = file->message_type(5);
  static const int getDirFilesNameRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameRequest, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameRequest, authuuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameRequest, dirstr_),
  };
  getDirFilesNameRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getDirFilesNameRequest_descriptor_,
      getDirFilesNameRequest::default_instance_,
      getDirFilesNameRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getDirFilesNameRequest));
  getDirFilesNameResponse_descriptor_ = file->message_type(6);
  static const int getDirFilesNameResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameResponse, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameResponse, dirstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameResponse, files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameResponse, errorcode_),
  };
  getDirFilesNameResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getDirFilesNameResponse_descriptor_,
      getDirFilesNameResponse::default_instance_,
      getDirFilesNameResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getDirFilesNameResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getDirFilesNameResponse));
  eFileType_descriptor_ = file->enum_type(0);
  eFilePermis_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_route_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getLatestVersionRequest_descriptor_, &getLatestVersionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getLatestVersionResponse_descriptor_, &getLatestVersionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userLoginRequest_descriptor_, &userLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userLoginResponse_descriptor_, &userLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tFile_descriptor_, &tFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getDirFilesNameRequest_descriptor_, &getDirFilesNameRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getDirFilesNameResponse_descriptor_, &getDirFilesNameResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_route_2eproto() {
  delete getLatestVersionRequest::default_instance_;
  delete getLatestVersionRequest_reflection_;
  delete getLatestVersionResponse::default_instance_;
  delete getLatestVersionResponse_reflection_;
  delete userLoginRequest::default_instance_;
  delete userLoginRequest_reflection_;
  delete userLoginResponse::default_instance_;
  delete userLoginResponse_reflection_;
  delete tFile::default_instance_;
  delete tFile_reflection_;
  delete getDirFilesNameRequest::default_instance_;
  delete getDirFilesNameRequest_reflection_;
  delete getDirFilesNameResponse::default_instance_;
  delete getDirFilesNameResponse_reflection_;
}

void protobuf_AddDesc_route_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013route.proto\022\nDFMS.ROUTE\"\031\n\027getLatestVe"
    "rsionRequest\"Z\n\030getLatestVersionResponse"
    "\022\021\n\tversionNo\030\001 \001(\t\022\030\n\020versionUpdateMsg\030"
    "\002 \001(\t\022\021\n\terrorCode\030\003 \001(\r\"J\n\020userLoginReq"
    "uest\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
    "\022\022\n\nmacAddress\030\003 \001(\t\"^\n\021userLoginRespons"
    "e\022\020\n\010username\030\001 \001(\t\022\021\n\tsessionId\030\002 \001(\t\022\021"
    "\n\tloginTime\030\003 \001(\004\022\021\n\terrorCode\030\004 \001(\r\"o\n\005"
    "tFile\022\020\n\010fileName\030\001 \001(\t\022\'\n\010fileType\030\002 \001("
    "\0162\025.DFMS.ROUTE.eFileType\022+\n\nfilePermis\030\003"
    " \001(\0162\027.DFMS.ROUTE.eFilePermis\"I\n\026getDirF"
    "ilesNameRequest\022\r\n\005reqId\030\001 \001(\r\022\020\n\010authUU"
    "ID\030\002 \001(\t\022\016\n\006dirStr\030\003 \001(\t\"m\n\027getDirFilesN"
    "ameResponse\022\r\n\005reqId\030\001 \001(\r\022\016\n\006dirStr\030\002 \001"
    "(\t\022 \n\005files\030\003 \003(\0132\021.DFMS.ROUTE.tFile\022\021\n\t"
    "errorCode\030\004 \001(\r*9\n\teFileType\022\014\n\010eDirType"
    "\020\000\022\014\n\010eDocType\020\001\022\020\n\014eGeneralType\020\002*B\n\013eF"
    "ilePermis\022\013\n\007eDenied\020\000\022\r\n\teReadOnly\020\001\022\016\n"
    "\neWriteOnly\020\002\022\007\n\003eRW\020\003", 742);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "route.proto", &protobuf_RegisterTypes);
  getLatestVersionRequest::default_instance_ = new getLatestVersionRequest();
  getLatestVersionResponse::default_instance_ = new getLatestVersionResponse();
  userLoginRequest::default_instance_ = new userLoginRequest();
  userLoginResponse::default_instance_ = new userLoginResponse();
  tFile::default_instance_ = new tFile();
  getDirFilesNameRequest::default_instance_ = new getDirFilesNameRequest();
  getDirFilesNameResponse::default_instance_ = new getDirFilesNameResponse();
  getLatestVersionRequest::default_instance_->InitAsDefaultInstance();
  getLatestVersionResponse::default_instance_->InitAsDefaultInstance();
  userLoginRequest::default_instance_->InitAsDefaultInstance();
  userLoginResponse::default_instance_->InitAsDefaultInstance();
  tFile::default_instance_->InitAsDefaultInstance();
  getDirFilesNameRequest::default_instance_->InitAsDefaultInstance();
  getDirFilesNameResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_route_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_route_2eproto {
  StaticDescriptorInitializer_route_2eproto() {
    protobuf_AddDesc_route_2eproto();
  }
} static_descriptor_initializer_route_2eproto_;
const ::google::protobuf::EnumDescriptor* eFileType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFileType_descriptor_;
}
bool eFileType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eFilePermis_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFilePermis_descriptor_;
}
bool eFilePermis_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

getLatestVersionRequest::getLatestVersionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getLatestVersionRequest::InitAsDefaultInstance() {
}

getLatestVersionRequest::getLatestVersionRequest(const getLatestVersionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getLatestVersionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getLatestVersionRequest::~getLatestVersionRequest() {
  SharedDtor();
}

void getLatestVersionRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getLatestVersionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getLatestVersionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getLatestVersionRequest_descriptor_;
}

const getLatestVersionRequest& getLatestVersionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

getLatestVersionRequest* getLatestVersionRequest::default_instance_ = NULL;

getLatestVersionRequest* getLatestVersionRequest::New() const {
  return new getLatestVersionRequest;
}

void getLatestVersionRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getLatestVersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void getLatestVersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getLatestVersionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getLatestVersionRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getLatestVersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getLatestVersionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getLatestVersionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getLatestVersionRequest::MergeFrom(const getLatestVersionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getLatestVersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getLatestVersionRequest::CopyFrom(const getLatestVersionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getLatestVersionRequest::IsInitialized() const {

  return true;
}

void getLatestVersionRequest::Swap(getLatestVersionRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getLatestVersionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getLatestVersionRequest_descriptor_;
  metadata.reflection = getLatestVersionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getLatestVersionResponse::kVersionNoFieldNumber;
const int getLatestVersionResponse::kVersionUpdateMsgFieldNumber;
const int getLatestVersionResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

getLatestVersionResponse::getLatestVersionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getLatestVersionResponse::InitAsDefaultInstance() {
}

getLatestVersionResponse::getLatestVersionResponse(const getLatestVersionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getLatestVersionResponse::SharedCtor() {
  _cached_size_ = 0;
  versionno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  versionupdatemsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getLatestVersionResponse::~getLatestVersionResponse() {
  SharedDtor();
}

void getLatestVersionResponse::SharedDtor() {
  if (versionno_ != &::google::protobuf::internal::kEmptyString) {
    delete versionno_;
  }
  if (versionupdatemsg_ != &::google::protobuf::internal::kEmptyString) {
    delete versionupdatemsg_;
  }
  if (this != default_instance_) {
  }
}

void getLatestVersionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getLatestVersionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getLatestVersionResponse_descriptor_;
}

const getLatestVersionResponse& getLatestVersionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

getLatestVersionResponse* getLatestVersionResponse::default_instance_ = NULL;

getLatestVersionResponse* getLatestVersionResponse::New() const {
  return new getLatestVersionResponse;
}

void getLatestVersionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_versionno()) {
      if (versionno_ != &::google::protobuf::internal::kEmptyString) {
        versionno_->clear();
      }
    }
    if (has_versionupdatemsg()) {
      if (versionupdatemsg_ != &::google::protobuf::internal::kEmptyString) {
        versionupdatemsg_->clear();
      }
    }
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getLatestVersionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string versionNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versionno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->versionno().data(), this->versionno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_versionUpdateMsg;
        break;
      }

      // optional string versionUpdateMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_versionUpdateMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versionupdatemsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->versionupdatemsg().data(), this->versionupdatemsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errorCode;
        break;
      }

      // optional uint32 errorCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getLatestVersionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string versionNo = 1;
  if (has_versionno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versionno().data(), this->versionno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->versionno(), output);
  }

  // optional string versionUpdateMsg = 2;
  if (has_versionupdatemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versionupdatemsg().data(), this->versionupdatemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->versionupdatemsg(), output);
  }

  // optional uint32 errorCode = 3;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getLatestVersionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string versionNo = 1;
  if (has_versionno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versionno().data(), this->versionno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->versionno(), target);
  }

  // optional string versionUpdateMsg = 2;
  if (has_versionupdatemsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versionupdatemsg().data(), this->versionupdatemsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->versionupdatemsg(), target);
  }

  // optional uint32 errorCode = 3;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getLatestVersionResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string versionNo = 1;
    if (has_versionno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versionno());
    }

    // optional string versionUpdateMsg = 2;
    if (has_versionupdatemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versionupdatemsg());
    }

    // optional uint32 errorCode = 3;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getLatestVersionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getLatestVersionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getLatestVersionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getLatestVersionResponse::MergeFrom(const getLatestVersionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_versionno()) {
      set_versionno(from.versionno());
    }
    if (from.has_versionupdatemsg()) {
      set_versionupdatemsg(from.versionupdatemsg());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getLatestVersionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getLatestVersionResponse::CopyFrom(const getLatestVersionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getLatestVersionResponse::IsInitialized() const {

  return true;
}

void getLatestVersionResponse::Swap(getLatestVersionResponse* other) {
  if (other != this) {
    std::swap(versionno_, other->versionno_);
    std::swap(versionupdatemsg_, other->versionupdatemsg_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getLatestVersionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getLatestVersionResponse_descriptor_;
  metadata.reflection = getLatestVersionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userLoginRequest::kUsernameFieldNumber;
const int userLoginRequest::kPasswordFieldNumber;
const int userLoginRequest::kMacAddressFieldNumber;
#endif  // !_MSC_VER

userLoginRequest::userLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void userLoginRequest::InitAsDefaultInstance() {
}

userLoginRequest::userLoginRequest(const userLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void userLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  macaddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userLoginRequest::~userLoginRequest() {
  SharedDtor();
}

void userLoginRequest::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
    delete macaddress_;
  }
  if (this != default_instance_) {
  }
}

void userLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userLoginRequest_descriptor_;
}

const userLoginRequest& userLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

userLoginRequest* userLoginRequest::default_instance_ = NULL;

userLoginRequest* userLoginRequest::New() const {
  return new userLoginRequest;
}

void userLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_macaddress()) {
      if (macaddress_ != &::google::protobuf::internal::kEmptyString) {
        macaddress_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_macAddress;
        break;
      }

      // optional string macAddress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_macAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_macaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->macaddress().data(), this->macaddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void userLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional string macAddress = 3;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->macaddress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* userLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional string macAddress = 3;
  if (has_macaddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->macaddress().data(), this->macaddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->macaddress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int userLoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string macAddress = 3;
    if (has_macaddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->macaddress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userLoginRequest::MergeFrom(const userLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_macaddress()) {
      set_macaddress(from.macaddress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userLoginRequest::CopyFrom(const userLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userLoginRequest::IsInitialized() const {

  return true;
}

void userLoginRequest::Swap(userLoginRequest* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(macaddress_, other->macaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userLoginRequest_descriptor_;
  metadata.reflection = userLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userLoginResponse::kUsernameFieldNumber;
const int userLoginResponse::kSessionIdFieldNumber;
const int userLoginResponse::kLoginTimeFieldNumber;
const int userLoginResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

userLoginResponse::userLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void userLoginResponse::InitAsDefaultInstance() {
}

userLoginResponse::userLoginResponse(const userLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void userLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintime_ = GOOGLE_ULONGLONG(0);
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userLoginResponse::~userLoginResponse() {
  SharedDtor();
}

void userLoginResponse::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionid_;
  }
  if (this != default_instance_) {
  }
}

void userLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userLoginResponse_descriptor_;
}

const userLoginResponse& userLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

userLoginResponse* userLoginResponse::default_instance_ = NULL;

userLoginResponse* userLoginResponse::New() const {
  return new userLoginResponse;
}

void userLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_sessionid()) {
      if (sessionid_ != &::google::protobuf::internal::kEmptyString) {
        sessionid_->clear();
      }
    }
    logintime_ = GOOGLE_ULONGLONG(0);
    errorcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sessionId;
        break;
      }

      // optional string sessionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessionid().data(), this->sessionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginTime;
        break;
      }

      // optional uint64 loginTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errorCode;
        break;
      }

      // optional uint32 errorCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void userLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  // optional string sessionId = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sessionid(), output);
  }

  // optional uint64 loginTime = 3;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logintime(), output);
  }

  // optional uint32 errorCode = 4;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* userLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // optional string sessionId = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionid().data(), this->sessionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sessionid(), target);
  }

  // optional uint64 loginTime = 3;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logintime(), target);
  }

  // optional uint32 errorCode = 4;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int userLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string sessionId = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionid());
    }

    // optional uint64 loginTime = 3;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintime());
    }

    // optional uint32 errorCode = 4;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userLoginResponse::MergeFrom(const userLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userLoginResponse::CopyFrom(const userLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userLoginResponse::IsInitialized() const {

  return true;
}

void userLoginResponse::Swap(userLoginResponse* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(logintime_, other->logintime_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userLoginResponse_descriptor_;
  metadata.reflection = userLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tFile::kFileNameFieldNumber;
const int tFile::kFileTypeFieldNumber;
const int tFile::kFilePermisFieldNumber;
#endif  // !_MSC_VER

tFile::tFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tFile::InitAsDefaultInstance() {
}

tFile::tFile(const tFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tFile::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filetype_ = 0;
  filepermis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tFile::~tFile() {
  SharedDtor();
}

void tFile::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void tFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tFile_descriptor_;
}

const tFile& tFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

tFile* tFile::default_instance_ = NULL;

tFile* tFile::New() const {
  return new tFile;
}

void tFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    filetype_ = 0;
    filepermis_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fileType;
        break;
      }

      // optional .DFMS.ROUTE.eFileType fileType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DFMS::ROUTE::eFileType_IsValid(value)) {
            set_filetype(static_cast< ::DFMS::ROUTE::eFileType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filePermis;
        break;
      }

      // optional .DFMS.ROUTE.eFilePermis filePermis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filePermis:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DFMS::ROUTE::eFilePermis_IsValid(value)) {
            set_filepermis(static_cast< ::DFMS::ROUTE::eFilePermis >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

  // optional .DFMS.ROUTE.eFileType fileType = 2;
  if (has_filetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->filetype(), output);
  }

  // optional .DFMS.ROUTE.eFilePermis filePermis = 3;
  if (has_filepermis()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->filepermis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional .DFMS.ROUTE.eFileType fileType = 2;
  if (has_filetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->filetype(), target);
  }

  // optional .DFMS.ROUTE.eFilePermis filePermis = 3;
  if (has_filepermis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->filepermis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tFile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional .DFMS.ROUTE.eFileType fileType = 2;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filetype());
    }

    // optional .DFMS.ROUTE.eFilePermis filePermis = 3;
    if (has_filepermis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filepermis());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tFile::MergeFrom(const tFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filetype()) {
      set_filetype(from.filetype());
    }
    if (from.has_filepermis()) {
      set_filepermis(from.filepermis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tFile::CopyFrom(const tFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tFile::IsInitialized() const {

  return true;
}

void tFile::Swap(tFile* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(filetype_, other->filetype_);
    std::swap(filepermis_, other->filepermis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tFile_descriptor_;
  metadata.reflection = tFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getDirFilesNameRequest::kReqIdFieldNumber;
const int getDirFilesNameRequest::kAuthUUIDFieldNumber;
const int getDirFilesNameRequest::kDirStrFieldNumber;
#endif  // !_MSC_VER

getDirFilesNameRequest::getDirFilesNameRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getDirFilesNameRequest::InitAsDefaultInstance() {
}

getDirFilesNameRequest::getDirFilesNameRequest(const getDirFilesNameRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getDirFilesNameRequest::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = 0u;
  authuuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dirstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getDirFilesNameRequest::~getDirFilesNameRequest() {
  SharedDtor();
}

void getDirFilesNameRequest::SharedDtor() {
  if (authuuid_ != &::google::protobuf::internal::kEmptyString) {
    delete authuuid_;
  }
  if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
    delete dirstr_;
  }
  if (this != default_instance_) {
  }
}

void getDirFilesNameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getDirFilesNameRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getDirFilesNameRequest_descriptor_;
}

const getDirFilesNameRequest& getDirFilesNameRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

getDirFilesNameRequest* getDirFilesNameRequest::default_instance_ = NULL;

getDirFilesNameRequest* getDirFilesNameRequest::New() const {
  return new getDirFilesNameRequest;
}

void getDirFilesNameRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = 0u;
    if (has_authuuid()) {
      if (authuuid_ != &::google::protobuf::internal::kEmptyString) {
        authuuid_->clear();
      }
    }
    if (has_dirstr()) {
      if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
        dirstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getDirFilesNameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_authUUID;
        break;
      }

      // optional string authUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authUUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authuuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authuuid().data(), this->authuuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dirStr;
        break;
      }

      // optional string dirStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dirstr().data(), this->dirstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getDirFilesNameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reqId = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reqid(), output);
  }

  // optional string authUUID = 2;
  if (has_authuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authuuid().data(), this->authuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->authuuid(), output);
  }

  // optional string dirStr = 3;
  if (has_dirstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirstr().data(), this->dirstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dirstr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getDirFilesNameRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reqId = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reqid(), target);
  }

  // optional string authUUID = 2;
  if (has_authuuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authuuid().data(), this->authuuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->authuuid(), target);
  }

  // optional string dirStr = 3;
  if (has_dirstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirstr().data(), this->dirstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dirstr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getDirFilesNameRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reqId = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

    // optional string authUUID = 2;
    if (has_authuuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authuuid());
    }

    // optional string dirStr = 3;
    if (has_dirstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirstr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getDirFilesNameRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getDirFilesNameRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getDirFilesNameRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getDirFilesNameRequest::MergeFrom(const getDirFilesNameRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_authuuid()) {
      set_authuuid(from.authuuid());
    }
    if (from.has_dirstr()) {
      set_dirstr(from.dirstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getDirFilesNameRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getDirFilesNameRequest::CopyFrom(const getDirFilesNameRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getDirFilesNameRequest::IsInitialized() const {

  return true;
}

void getDirFilesNameRequest::Swap(getDirFilesNameRequest* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(authuuid_, other->authuuid_);
    std::swap(dirstr_, other->dirstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getDirFilesNameRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getDirFilesNameRequest_descriptor_;
  metadata.reflection = getDirFilesNameRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getDirFilesNameResponse::kReqIdFieldNumber;
const int getDirFilesNameResponse::kDirStrFieldNumber;
const int getDirFilesNameResponse::kFilesFieldNumber;
const int getDirFilesNameResponse::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

getDirFilesNameResponse::getDirFilesNameResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getDirFilesNameResponse::InitAsDefaultInstance() {
}

getDirFilesNameResponse::getDirFilesNameResponse(const getDirFilesNameResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getDirFilesNameResponse::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = 0u;
  dirstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getDirFilesNameResponse::~getDirFilesNameResponse() {
  SharedDtor();
}

void getDirFilesNameResponse::SharedDtor() {
  if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
    delete dirstr_;
  }
  if (this != default_instance_) {
  }
}

void getDirFilesNameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getDirFilesNameResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getDirFilesNameResponse_descriptor_;
}

const getDirFilesNameResponse& getDirFilesNameResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_route_2eproto();
  return *default_instance_;
}

getDirFilesNameResponse* getDirFilesNameResponse::default_instance_ = NULL;

getDirFilesNameResponse* getDirFilesNameResponse::New() const {
  return new getDirFilesNameResponse;
}

void getDirFilesNameResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = 0u;
    if (has_dirstr()) {
      if (dirstr_ != &::google::protobuf::internal::kEmptyString) {
        dirstr_->clear();
      }
    }
    errorcode_ = 0u;
  }
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getDirFilesNameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reqId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dirStr;
        break;
      }

      // optional string dirStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dirstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dirstr().data(), this->dirstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_files;
        break;
      }

      // repeated .DFMS.ROUTE.tFile files = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_files()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_files;
        if (input->ExpectTag(32)) goto parse_errorCode;
        break;
      }

      // optional uint32 errorCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getDirFilesNameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reqId = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reqid(), output);
  }

  // optional string dirStr = 2;
  if (has_dirstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirstr().data(), this->dirstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dirstr(), output);
  }

  // repeated .DFMS.ROUTE.tFile files = 3;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->files(i), output);
  }

  // optional uint32 errorCode = 4;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getDirFilesNameResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reqId = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reqid(), target);
  }

  // optional string dirStr = 2;
  if (has_dirstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dirstr().data(), this->dirstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dirstr(), target);
  }

  // repeated .DFMS.ROUTE.tFile files = 3;
  for (int i = 0; i < this->files_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->files(i), target);
  }

  // optional uint32 errorCode = 4;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getDirFilesNameResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reqId = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

    // optional string dirStr = 2;
    if (has_dirstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dirstr());
    }

    // optional uint32 errorCode = 4;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

  }
  // repeated .DFMS.ROUTE.tFile files = 3;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->files(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getDirFilesNameResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getDirFilesNameResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getDirFilesNameResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getDirFilesNameResponse::MergeFrom(const getDirFilesNameResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_dirstr()) {
      set_dirstr(from.dirstr());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getDirFilesNameResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getDirFilesNameResponse::CopyFrom(const getDirFilesNameResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getDirFilesNameResponse::IsInitialized() const {

  return true;
}

void getDirFilesNameResponse::Swap(getDirFilesNameResponse* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(dirstr_, other->dirstr_);
    files_.Swap(&other->files_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getDirFilesNameResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getDirFilesNameResponse_descriptor_;
  metadata.reflection = getDirFilesNameResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ROUTE
}  // namespace DFMS

// @@protoc_insertion_point(global_scope)
